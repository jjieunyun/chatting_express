#!/usr/bin/env node

/**
 * Module dependencies.
 */

//www파일은 서버에 관한 모듈을 가져와서 연결하는 파일
//app.js의 파일을 가져옴 : app.js파일은 

var app = require('../app');
var debug = require('debug')('chatting:server');
var http = require('http');
//설치한 socket.io모듈 불러오기
const socket  = require('socket.io')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//http서버를 socket과 연결 
const io = socket(server)

//io를 통해 connection이벤트가 발생하면 아래내용 실행
io.sockets.on('connection', function(socket){
  console.log('유저접속됨');

  socket.on('send', function(data){
    console.log('전달된 메시지 : ', data.msg)
  })
  socket.on('disconnect', function(){
    console.log('접속종료')
  })

})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('서버실행 중');
}

